// Shader test for AGE (agk game editor)
uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D texture2;
varying highp vec2 uvVarying;
varying mediump vec3 normalVarying;
varying mediump vec3 lightVarying;
varying highp vec3 posVarying;
mediump vec3 GetPSLighting( mediump vec3 normal, highp vec3 pos );
mediump vec3 ApplyFog( mediump vec3 color, highp vec3 pointPos );
uniform mediump vec4 agk_MeshDiffuse;
uniform mediump vec4 agk_MeshEmissive;
uniform float specular; // 0.6
uniform highp vec3 lightVector;
varying highp vec3 cameraVector;
const float shineDamper = 20.0; 


void main()
{ 
    mediump vec4 blendTex = vec4(1.0,1.0,1.0,1.0);
    mediump vec3 norm = normalize(normalVarying);
    mediump vec3 light = (lightVarying + GetPSLighting( norm, posVarying )); 
    mediump vec3 spec = (lightVarying + GetPSLighting( norm, posVarying ))*texture2D(texture1, uvVarying).rgb ; 
   
    // Normal
	vec4 normalColor = texture2D(texture2, uvVarying);
	vec3 normal = vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 -1.0);
	normal = normalize(normal);
	
	//vec3 viewVector = normalize(cameraVector);
	//float refractFactor = dot(viewVector, normal);
	//vec3 reflectedLight = reflect(normalize(lightVector), normal);
	//float specular = max(dot(reflectedLight, viewVector), 0.0);
	//float specular = pow(spec, shineDamper); // specular = pow(specular, shineDamper);
	//vec3 specularHighlights = spec * vec3(1.0,1.0,1.0) * lightVarying;

   //gl_FragColor = vec4(normal,1.0)*0.1 + vec4(spec,1.0)*0.6 + texture2D(texture0, uvVarying) * blendTex * vec4(light,1.0) * agk_MeshDiffuse + agk_MeshEmissive;
   gl_FragColor = vec4(spec,0.0)*0.3 + texture2D(texture0, uvVarying) * blendTex * vec4(light,1.0) * agk_MeshDiffuse + agk_MeshEmissive;
   //gl_FragColor = vec4(specularHighlights, 0.0) + texture2D(texture0, uvVarying) * blendTex * vec4(light,1.0) * agk_MeshDiffuse + agk_MeshEmissive;
    gl_FragColor.rgb = ApplyFog( gl_FragColor.rgb, posVarying );
	
}